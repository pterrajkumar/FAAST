/*
Copyright (c) AppDynamics, Inc., and its affiliates
2015
All Rights Reserved
 */
'use strict';


function MysqlProbe(agent) {
  this.agent = agent;

  this.packages = ['mysql'];
}
exports.MysqlProbe = MysqlProbe;

function prepareExitCall(config, client, proxy, profiler) {
  var supportedProperties = {
    'HOST': config.host,
    'PORT': config.port,
    'DATABASE': config.database,
    'VENDOR': 'MYSQL'
  };

  proxy.before(client, 'query', function(obj, args) {
    var command, params, exitCall;
    var time = profiler.time();
    var trace = profiler.stackTrace();

    function processQueryCb(obj, args) {
      if (!time.done()) {
        return;
      }
      var error = proxy.getErrorObject(args);
      if (!exitCall) {
        return;
      }
      profiler.addExitCall(time, exitCall, error);
    }

    function createExitCall() {
      exitCall = profiler.createExitCall(time, {
        exitType: 'EXIT_DB',
        backendName: 'MySQL',
        supportedProperties: supportedProperties,
        command: profiler.sanitize(command),
        commandArgs: profiler.sanitize(params),
        user: config.user,
        stackTrace: trace,
        isSql: true
      });
    }

    if (args[0] && args[0].__appdCbFn) {
      command = args[0].sql;
      params = args[0].values;
      proxy.before(args[0], '__appdCbFn', processQueryCb());
      if (args[0].__appdCbFn.__appdynamicsProxyInfo__)
        createExitCall();
    } else {
      command = args.length > 0 ? args[0] : undefined;
      params = args.length > 1 && Array.isArray(args[1]) ? args[1] : undefined;
      proxy.callback(args, -1, processQueryCb);
      if (args[args.length - 1].__appdynamicsProxy__)
        createExitCall();
    }
  });
}

MysqlProbe.prototype.attach = function(obj) {
  var self = this;
  var proxy = self.agent.proxy;
  var profiler = self.agent.profiler;
  var cmds = ['createClient', 'createConnection', 'createPool'];

  if(obj.__appdynamicsProbeAttached__) return;
  obj.__appdynamicsProbeAttached__ = true;
  self.agent.on('destroy', function() {
    if(obj.__appdynamicsProbeAttached__) {
      delete obj.__appdynamicsProbeAttached__;
      cmds.forEach(function(createCmd) {
        proxy.release(obj[createCmd]);
      });
    }
  });

  cmds.forEach(function(createCmd) {
    proxy.after(obj, createCmd, function(obj, args, ret) {
      if (createCmd === 'createPool') {
        proxy.before(ret, 'getConnection', function(obj, args) {
          proxy.callback(args, -1, function(obj, args) {
            if (args[0]) return;
            if (args[1]) {
              var connection = args[1],
                config = connection.config;
              prepareExitCall(config, connection, proxy, profiler);
            }
          });
        });

        proxy.after(ret, 'query', function(obj, args, query) {
          var callback;
          if (typeof args[0] === 'function') {
            callback = args[0];
          } else if (typeof args[1] === 'function') {
            callback = args[1];
          } else {
            callback = args[2];
          }
          query.__appdCbFn = callback;
        });
      } else {
        var client = ret;
        var config = (createCmd === 'createClient' ? client : client.config);
        if (!config) {
          return;
        }
        prepareExitCall(config, client, proxy, profiler);
      }
    });
  });
};
